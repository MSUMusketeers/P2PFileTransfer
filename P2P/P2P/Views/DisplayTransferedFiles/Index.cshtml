@using System.Text.Json
@using System.Text.Json.Serialization
@{
    ViewData["Title"] = "File History";

    var options = new JsonSerializerOptions
            {
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
                Converters =
        {
            new JsonStringEnumConverter(),
            new JsonDateOnlyConverter(),
            new JsonTimeOnlyConverter()
        }
            };

    var receivedFiles = Model.Where(x => x.isSender == false).ToList();
    var sentFiles = Model.Where(x => x.isSender == true).ToList();
}
@model List<P2P.Models.TransferHistory>

<div class="container py-4">
    <h2 class="text-center mb-4"> Received Files History</h2>

    <div class="card shadow-sm mb-5 p-4">
        <div class="d-flex justify-content-end mb-3">
            <div class="input-group" style="max-width: 300px;">
                <input type="text" class="form-control" id="receivedFileSearch" placeholder=" Search by file name..." />
            </div>
        </div>

        <div id="receivedHistoryGrid" class="ag-theme-alpine" style="height: 700px; width: 100%;"></div>
    </div>

    <h2 class="text-center my-4"> Sent Files History</h2>

    <div class="card shadow-sm mb-5 p-4">
        <div class="d-flex justify-content-end mb-3">
            <div class="input-group" style="max-width: 300px;">
                <input type="text" class="form-control" id="sentFileSearch" placeholder=" Search by file name..." />
            </div>
        </div>

        <div id="sentHistoryGrid" class="ag-theme-alpine" style="height: 700px; width: 100%;"></div>
    </div>
</div>

<!-- AG Grid Scripts -->
<script src="https://cdn.jsdelivr.net/npm/ag-grid-community/dist/ag-grid-community.min.noStyle.js"></script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        function formatFileSize(sizeInBytes) {
            if (sizeInBytes < 1024) return sizeInBytes + ' Bytes';
            if (sizeInBytes < 1024 * 1024) return (sizeInBytes / 1024).toFixed(2) + ' KB';
            if (sizeInBytes < 1024 * 1024 * 1024) return (sizeInBytes / (1024 * 1024)).toFixed(1) + ' MB';
            return (sizeInBytes / (1024 * 1024 * 1024)).toFixed(2) + ' GB';
        }

        let receivedGridApi, sentGridApi;

        const columnDefs = [
            {
                headerName: "ID",
                valueGetter: "node.rowIndex + 1",
                width: 70
            },
            {
                headerName: "Date",
                field: "date",
                filter: 'agDateColumnFilter',
                minWidth: 140
            },
            {
                headerName: "File Size",
                field: "fileTransfered",
                minWidth: 130,
                cellRenderer: function(params) {
                    let fileData = [];
                    try { fileData = JSON.parse(params.value); }
                    catch (e) { console.error("Error parsing fileTransfered:", e); }
                    if (Array.isArray(fileData) && fileData.length) {
                        return fileData.map(item => {
                            if (Array.isArray(item) && item.length === 2) {
                                return formatFileSize(parseInt(item[0], 10));
                            }
                            return "N/A";
                        }).join("<br>");
                    }
                    return "N/A";
                }
            },
            {
                headerName: "File Name",
                field: "fileTransfered",
                flex: 2,
                cellRenderer: function(params) {
                    let fileData = [];
                    try { fileData = JSON.parse(params.value); }
                    catch (e) { console.error("Error parsing fileTransfered:", e); }
                    if (Array.isArray(fileData) && fileData.length) {
                        return fileData.map(item => {
                            if (Array.isArray(item) && item.length === 2) {
                                return item[1];
                            }
                            return "N/A";
                        }).join("<br>");
                    }
                    return "N/A";
                }
            },
            {
                headerName: "Time",
                field: "time",
                minWidth: 120
            }
        ];

        const receivedGridOptions = {
            columnDefs: columnDefs,
            rowData: @(receivedFiles != null ? Html.Raw(JsonSerializer.Serialize(receivedFiles, options)) : "[]"),
            pagination: true,
            paginationPageSize: 10,
            animateRows: true,
            defaultColDef: {
                flex: 1,
                wrapText: true,
                autoHeight: true,
                minWidth: 100,
                sortable: true,
                filter: true,
                resizable: true
            },
            onGridReady: params => { receivedGridApi = params.api; }
        };

        const sentGridOptions = {
            columnDefs: columnDefs,
            rowData: @(sentFiles != null ? Html.Raw(JsonSerializer.Serialize(sentFiles, options)) : "[]"),
            pagination: true,
            paginationPageSize: 10,
            animateRows: true,
            defaultColDef: {
                flex: 1,
                wrapText: true,
                autoHeight: true,
                minWidth: 100,
                sortable: true,
                filter: true,
                resizable: true
            },
            onGridReady: params => { sentGridApi = params.api; }
        };

        agGrid.createGrid(document.querySelector('#receivedHistoryGrid'), receivedGridOptions);
        agGrid.createGrid(document.querySelector('#sentHistoryGrid'), sentGridOptions);

        document.getElementById('receivedFileSearch').addEventListener('input', function () {
            if (receivedGridApi) receivedGridApi.setGridOption('quickFilterText', this.value);
        });

        document.getElementById('sentFileSearch').addEventListener('input', function () {
            if (sentGridApi) sentGridApi.setGridOption('quickFilterText', this.value);
        });
    });
</script>
